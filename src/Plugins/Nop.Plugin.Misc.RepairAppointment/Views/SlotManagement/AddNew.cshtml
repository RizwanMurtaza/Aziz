@model Nop.Plugin.Misc.RepairAppointment.Models.SlotCapacity.SingleDaySlotManagementModel
@{
    Layout = "_AdminLayout";
    ViewBag.Title = "Add New Slot";
    NopHtml.SetActiveMenuItemSystemName("RepairAppointments.SlotManagement");
}

<nop-antiforgery-token />

<div class="content-header clearfix">
    <h1 class="float-left">
        <i class="fas fa-calendar-plus"></i>
        Add New Slot
    </h1>
    <div class="float-right">
        <a href="@Url.Action("List", "SlotManagement", new { area = "Admin" })" class="btn btn-secondary">
            <i class="fas fa-arrow-left"></i>
            Back to List
        </a>
    </div>
</div>

<section class="content">
    <div class="container-fluid">
        <div class="card card-default">
            <div class="card-body">
                <!-- Date Selection -->
                <div class="form-group row">
                    <div class="col-md-2">
                        <label for="selected-date">Select Date:</label>
                    </div>
                    <div class="col-md-4">
                        <input type="date" id="selected-date" class="form-control"
                               value="@Model.SelectedDate.ToString("yyyy-MM-dd")"
                               min="@DateTime.Today.ToString("yyyy-MM-dd")" />
                        <div id="date-validation-message" class="text-danger mt-1" style="display: none;"></div>
                        <small class="form-text text-muted">Select a date to manage slots for.</small>
                    </div>
                    <div class="col-md-4">
                        <button type="button" id="load-slots" class="btn btn-primary">
                            <i class="fas fa-search"></i>
                            Load Slots
                        </button>
                    </div>
                </div>

                <!-- Working Days Info -->
                <div class="alert alert-info" id="working-days-info">
                    <i class="fas fa-info-circle"></i>
                    <strong>Working Days:</strong>
                    @{
                        var dayNames = new[] { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };
                        var workingDayNames = Model.WorkingDays.Select(d => dayNames[d]).ToArray();
                    }
                    @string.Join(", ", workingDayNames)
                    <br />
                    <small class="text-muted">
                        <i class="fas fa-calendar-alt"></i>
                        Only dates that fall on these days can be selected. Non-working days will show a validation error.
                    </small>
                </div>

                <!-- Time Slots Section -->
                <div class="card" id="time-slots-card" style="display: none;">
                    <div class="card-header">
                        <h3 class="card-title">
                            <i class="fas fa-clock"></i>
                            Time Slots for <span id="selected-date-display"></span>
                        </h3>
                    </div>
                    <div class="card-body">
                        <div id="time-slots-container">
                            <!-- Time slots will be loaded here -->
                        </div>

                        <div class="alert alert-warning mt-3">
                            <i class="fas fa-exclamation-triangle"></i>
                            <strong>Note:</strong> Click on any time slot to modify its capacity. Existing slots are highlighted differently.
                        </div>
                    </div>
                </div>

                <!-- Apply Changes Section -->
                <div id="apply-changes-section" style="display: none;">
                    <div class="card mt-3">
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-8">
                                    <h5><i class="fas fa-check-circle text-success"></i> Ready to apply changes</h5>
                                    <p class="text-muted">Click "Apply Changes" to save your slot capacity modifications.</p>
                                </div>
                                <div class="col-md-4 text-right">
                                    <button type="button" id="reset-changes" class="btn btn-warning me-2">
                                        <i class="fas fa-undo"></i>
                                        Reset Changes
                                    </button>
                                    <button type="button" id="apply-changes" class="btn btn-success">
                                        <i class="fas fa-save"></i>
                                        Apply Changes
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Modal for editing slot capacity -->
<div class="modal fade" id="capacity-modal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Slot Capacity</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="modal-time-slot">Time Slot:</label>
                    <input type="text" id="modal-time-slot" class="form-control" readonly />
                </div>
                <div class="form-group">
                    <label for="modal-default-capacity">Default Capacity:</label>
                    <input type="number" id="modal-default-capacity" class="form-control" readonly />
                </div>
                <div class="form-group">
                    <label for="modal-new-capacity">New Capacity:</label>
                    <input type="number" id="modal-new-capacity" class="form-control" min="0" max="100" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" id="save-capacity" class="btn btn-primary">Save Changes</button>
            </div>
        </div>
    </div>
</div>

<style>
.time-slot-card {
    border: 1px solid #dee2e6;
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 15px;
    cursor: pointer;
    transition: all 0.3s ease;
    background: white;
}

.time-slot-card:hover {
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    transform: translateY(-2px);
}

.time-slot-card.modified {
    border-color: #ffc107;
    background-color: #fff3cd;
}

.time-slot-card.existing {
    border-color: #17a2b8;
    background-color: #d1ecf1;
}

.time-slot-info {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.capacity-badge {
    padding: 5px 10px;
    border-radius: 15px;
    font-weight: bold;
    font-size: 0.9em;
}

.capacity-default {
    background-color: #e9ecef;
    color: #495057;
}

.capacity-modified {
    background-color: #ffc107;
    color: #212529;
}

.capacity-existing {
    background-color: #17a2b8;
    color: white;
}

#date-validation-message {
    font-size: 0.9em;
    padding: 8px;
    border-radius: 4px;
    border-left: 4px solid #dc3545;
    background-color: #f8d7da;
}

#selected-date:invalid {
    border-color: #dc3545;
}
</style>

<script>
var timeSlots = [];
var selectedSlotIndex = -1;
var selectedDate = null;
var workingDays = @Html.Raw(Json.Serialize(Model.WorkingDays));

$(document).ready(function() {
    // Debug: log the working days
    console.log('Working days from server:', workingDays);
    console.log('Working days type:', typeof workingDays);
    // Initialize date validation
    validateSelectedDate();

    // Add real-time date validation
    $('#selected-date').on('change', function() {
        validateSelectedDate();
    });

    // Load slots for selected date
    $('#load-slots').click(function() {
        if (!validateSelectedDate()) {
            return;
        }

        selectedDate = new Date($('#selected-date').val() + 'T00:00:00');

        // Show loading
        $('#time-slots-container').html('<div class="text-center"><i class="fas fa-spinner fa-spin"></i> Loading time slots...</div>');
        $('#time-slots-card').show();
        $('#selected-date-display').text(selectedDate.toLocaleDateString());

        // Load time slots via AJAX
        var ajaxUrl = '@Url.Action("GetTimeSlotsForDate", "SlotManagement", new { area = "Admin" })';

        $.ajax({
            url: ajaxUrl,
            type: 'POST',
            data: JSON.stringify({ Date: selectedDate.toISOString() }),
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            beforeSend: function(xhr) {
                var token = $('input[name="__RequestVerificationToken"]').val();
                if (token) {
                    xhr.setRequestHeader("RequestVerificationToken", token);
                }
            },
            success: function(response) {
                if (response.success) {
                    timeSlots = response.timeSlots;
                    renderTimeSlots();
                } else {
                    $('#time-slots-container').html('<div class="alert alert-danger">' + response.message + '</div>');
                }
            },
            error: function(xhr, status, error) {
                console.error('AJAX Error:', xhr.responseText);
                $('#time-slots-container').html('<div class="alert alert-danger">Error loading time slots: ' + error + '. Please try again.</div>');
            }
        });
    });

    function renderTimeSlots() {
        var html = '<div class="row">';

        for (var i = 0; i < timeSlots.length; i++) {
            var slot = timeSlots[i];
            var isModified = slot.NewCapacity !== slot.DefaultCapacity;
            var isExisting = slot.Exists;

            var capacityClass = isModified ? 'capacity-modified' : (isExisting ? 'capacity-existing' : 'capacity-default');
            var cardClass = 'time-slot-card';

            if (isModified) {
                cardClass += ' modified';
            } else if (isExisting) {
                cardClass += ' existing';
            }

            html += '<div class="col-md-4">';
            html += '<div class="' + cardClass + '" data-slot-index="' + i + '">';
            html += '<div class="time-slot-info">';
            html += '<div>';
            html += '<strong>' + slot.TimeSlot + '</strong><br/>';
            html += '<small class="text-muted">' + slot.StartTimeFormatted + ' - ' + slot.EndTimeFormatted + '</small>';
            if (isExisting) {
                html += '<br/><small class="text-info"><i class="fas fa-info-circle"></i> Existing slot</small>';
            }
            html += '</div>';
            html += '<div>';
            html += '<span class="capacity-badge ' + capacityClass + '">';
            html += slot.NewCapacity;
            html += '</span>';
            html += '</div>';
            html += '</div>';
            html += '</div>';
            html += '</div>';
        }

        html += '</div>';
        $('#time-slots-container').html(html);
        $('#apply-changes-section').show();
    }

    // Handle time slot click
    $(document).on('click', '.time-slot-card', function() {
        selectedSlotIndex = $(this).data('slot-index');
        var slot = timeSlots[selectedSlotIndex];

        $('#modal-time-slot').val(slot.TimeSlot);
        $('#modal-default-capacity').val(slot.DefaultCapacity);
        $('#modal-new-capacity').val(slot.NewCapacity);

        $('#capacity-modal').modal('show');
    });

    // Save capacity changes
    $('#save-capacity').click(function() {
        var newCapacity = parseInt($('#modal-new-capacity').val());

        if (isNaN(newCapacity) || newCapacity < 0 || newCapacity > 100) {
            alert('Please enter a valid capacity between 0 and 100.');
            return;
        }

        timeSlots[selectedSlotIndex].NewCapacity = newCapacity;
        renderTimeSlots();
        $('#capacity-modal').modal('hide');
    });

    // Apply changes
    $('#apply-changes').click(function() {
        if (!selectedDate) {
            alert('Please select a date first.');
            return;
        }

        var changedSlots = timeSlots.filter(slot => slot.NewCapacity !== slot.DefaultCapacity || slot.Exists);

        if (changedSlots.length === 0) {
            alert('No changes to apply.');
            return;
        }

        if (!confirm('Are you sure you want to apply capacity changes for ' + changedSlots.length + ' time slots on ' + selectedDate.toLocaleDateString() + '?')) {
            return;
        }

        // Apply changes via AJAX
        $.ajax({
            url: '@Url.Action("ApplySlotChangesForDate", "SlotManagement", new { area = "Admin" })',
            type: 'POST',
            data: JSON.stringify({
                Date: selectedDate.toISOString(),
                TimeSlots: timeSlots
            }),
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            beforeSend: function(xhr) {
                var token = $('input[name="__RequestVerificationToken"]').val();
                if (token) {
                    xhr.setRequestHeader("RequestVerificationToken", token);
                }
            },
            success: function(response) {
                if (response.success) {
                    alert('Slot changes applied successfully for ' + response.affectedSlots + ' slots.');
                    // Reload slots to show updated state
                    $('#load-slots').click();
                } else {
                    alert('Error: ' + response.message);
                }
            },
            error: function(xhr, status, error) {
                console.error('AJAX Error:', xhr.responseText);
                alert('Error applying changes: ' + error);
            }
        });
    });

    // Reset changes
    $('#reset-changes').click(function() {
        if (confirm('Are you sure you want to reset all changes?')) {
            timeSlots.forEach(slot => slot.NewCapacity = slot.DefaultCapacity);
            renderTimeSlots();
        }
    });

    // Date validation function
    function validateSelectedDate() {
        var dateInput = $('#selected-date');
        var messageDiv = $('#date-validation-message');
        var loadButton = $('#load-slots');

        var selectedDateStr = dateInput.val();
        if (!selectedDateStr) {
            messageDiv.hide();
            loadButton.prop('disabled', true);
            return false;
        }

        var selectedDate = new Date(selectedDateStr + 'T00:00:00');
        if (isNaN(selectedDate.getTime())) {
            messageDiv.text('Please select a valid date.').show();
            loadButton.prop('disabled', true);
            return false;
        }

        // Check if selected date is a working day
        var dayOfWeek = selectedDate.getDay();
        var dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];

        // Ensure working days are integers for all operations
        var workingDaysInt = workingDays.map(function(day) {
            return parseInt(day, 10);
        });
        var workingDayNames = workingDaysInt.map(d => dayNames[d]);

        // Debug: log the validation details
        console.log('Selected date:', selectedDate);
        console.log('Day of week (JS):', dayOfWeek, '(' + dayNames[dayOfWeek] + ')');
        console.log('Working days array (original):', workingDays);
        console.log('Working days as integers:', workingDaysInt);
        console.log('Working day names:', workingDayNames);
        console.log('Is day of week in working days?', workingDaysInt.includes(dayOfWeek));

        if (!workingDaysInt.includes(dayOfWeek)) {
            messageDiv.html('<i class="fas fa-exclamation-triangle"></i> Selected date (' + dayNames[dayOfWeek] + ') is not a working day.<br>Please choose a date that falls on: <strong>' + workingDayNames.join(', ') + '</strong>').show();
            loadButton.prop('disabled', true);
            return false;
        }

        // Date is valid
        messageDiv.hide();
        loadButton.prop('disabled', false);
        return true;
    }
});
</script>