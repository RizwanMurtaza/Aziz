@model CategoryNavigationModel

@using Nop.Core.Domain.Catalog

@functions {
    bool BreadCrumbContainsCurrentCategoryId(CategorySimpleModel category)
    {
        if (Model.CurrentCategoryId == 0)
            return false;

        if (category.Id == Model.CurrentCategoryId)
            return true;

        foreach (var subCategory in category.SubCategories)
        {
            if (BreadCrumbContainsCurrentCategoryId(subCategory))
            {
                return true;
            }
        }

        return false;
    }

    async Task CategoryLine(CategoryNavigationModel.CategoryLineModel lineModel)
    {
        var active = lineModel.Category.Id == lineModel.CurrentCategoryId || lineModel.Category.SubCategories.Count(BreadCrumbContainsCurrentCategoryId) > 0;
        var last = lineModel.Category.Id == lineModel.CurrentCategoryId;
        var liClass = active ? "active" : "inactive";
        if (last)
        {
            liClass += " last";
        }

        <li class="@liClass">
            <a href="@(Url.RouteUrl<Category>(new { SeName = lineModel.Category.SeName }))">
                @lineModel.Category.Name
                @if (lineModel.Category.NumberOfProducts.HasValue)
                {
                    <text> </text>@T("Categories.TotalProducts", lineModel.Category.NumberOfProducts.Value)
                }
            </a>
            @{
                if (lineModel.Category.Id == lineModel.CurrentCategoryId ||
                lineModel.Category.SubCategories.Count(BreadCrumbContainsCurrentCategoryId) > 0)
                {
                    if (lineModel.Category.SubCategories.Count > 0)
                    {
                        <ul class="sublist">
                            @foreach (var subCategory in lineModel.Category.SubCategories)
                            {
                                var categoryLineModel = new CategoryNavigationModel.CategoryLineModel
                                {
                                    CurrentCategoryId = lineModel.CurrentCategoryId,
                                    Category = subCategory
                                };
                                await CategoryLine(categoryLineModel);
                            }
                        </ul>
                    }
                }
            }
        </li>
    }
}
@if (Model.Categories.Count > 0)
{
    <div class="block block-category-navigation well box-shadow-wrapper modern-category-nav">
        <div class="title main-title">
            <strong>@T("Categories")</strong>
        </div>
        <div class="listbox">
            <ul class="nav nav-list category-list">
                @{
                    var visibleCount = 6; // Show 6 categories initially
                    var currentIndex = 0;
                }
                @foreach (var category in Model.Categories)
                {
                    var categoryLineModel = new CategoryNavigationModel.CategoryLineModel
                    {
                        CurrentCategoryId = Model.CurrentCategoryId,
                        Category = category
                    };
                    var itemClass = currentIndex >= visibleCount ? "category-item-hidden" : "category-item-visible";

                    <div class="category-wrapper @itemClass">
                        @{ await CategoryLine(categoryLineModel); }
                    </div>
                    currentIndex++;
                }
            </ul>
            @if (Model.Categories.Count > visibleCount)
            {
                <div class="category-expand-section">
                    <button class="btn-expand-categories" onclick="toggleCategories()">
                        <span class="expand-text">Show More Categories</span>
                        <span class="collapse-text" style="display: none;">Show Less Categories</span>
                        <i class="fa fa-chevron-down expand-icon"></i>
                        <i class="fa fa-chevron-up collapse-icon" style="display: none;"></i>
                    </button>
                    <div class="category-count">
                        <span class="visible-count">@visibleCount</span> of <span class="total-count">@Model.Categories.Count</span> categories
                    </div>
                </div>
            }
        </div>
    </div>

    <script>
    let categoryDisplayedCount = 6; // Initially showing 6 categories
    const categoryStepSize = 10; // Show 10 more each time

    function toggleCategories() {
        const allItems = document.querySelectorAll('.category-wrapper');
        const totalCount = allItems.length;
        const expandText = document.querySelector('.btn-expand-categories .expand-text');
        const collapseText = document.querySelector('.btn-expand-categories .collapse-text');
        const expandIcon = document.querySelector('.btn-expand-categories .expand-icon');
        const collapseIcon = document.querySelector('.btn-expand-categories .collapse-icon');
        const visibleCountSpan = document.querySelector('.category-expand-section .visible-count');

        // Check current state
        const isShowingAll = categoryDisplayedCount >= totalCount;

        if (isShowingAll) {
            // Collapse back to initial 6
            categoryDisplayedCount = 6;
            allItems.forEach((item, index) => {
                if (index < categoryDisplayedCount) {
                    item.style.display = 'block';
                    item.classList.remove('category-item-hidden');
                    item.classList.add('category-item-visible');
                } else {
                    item.style.display = 'none';
                    item.classList.add('category-item-hidden');
                    item.classList.remove('category-item-visible');
                }
            });

            // Show expand button
            expandText.style.display = 'inline';
            collapseText.style.display = 'none';
            expandIcon.style.display = 'inline';
            collapseIcon.style.display = 'none';
        } else {
            // Show more categories (10 more)
            const newCount = Math.min(categoryDisplayedCount + categoryStepSize, totalCount);

            allItems.forEach((item, index) => {
                if (index < newCount) {
                    item.style.display = 'block';
                    item.classList.remove('category-item-hidden');
                    item.classList.add('category-item-visible');
                }
            });

            categoryDisplayedCount = newCount;

            // Update button text based on whether all items are now visible
            if (categoryDisplayedCount >= totalCount) {
                expandText.textContent = 'Show More Categories';
                expandText.style.display = 'none';
                collapseText.style.display = 'inline';
                expandIcon.style.display = 'none';
                collapseIcon.style.display = 'inline';
            } else {
                expandText.textContent = `Show ${Math.min(categoryStepSize, totalCount - categoryDisplayedCount)} More Categories`;
            }
        }

        // Update visible count display
        if (visibleCountSpan) {
            visibleCountSpan.textContent = categoryDisplayedCount;
        }
    }
    </script>
}
