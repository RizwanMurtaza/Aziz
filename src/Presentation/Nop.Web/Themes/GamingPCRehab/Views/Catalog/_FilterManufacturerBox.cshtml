@model ManufacturerFilterModel

<div class="product-filter product-manufacturer-filter well modern-filter-nav">
    <div class="title main-title">
        <strong>@T("Filtering.ManufacturerFilter")</strong>
    </div>
    <div class="filter-content listbox">
        <ul class="group product-manufacturer-group nav nav-list manufacturer-list">
            @{
                var visibleCount = 6; // Show 6 manufacturers initially
                var currentIndex = 0;
            }
            @foreach (var manufacturer in Model.Manufacturers)
            {
                var itemClass = currentIndex >= visibleCount ? "manufacturer-item-hidden" : "manufacturer-item-visible";
                <div class="manufacturer-wrapper @itemClass">
                    <li class="item">
                        <input id="attribute-manufacturer-@manufacturer.Value" type="checkbox" data-manufacturer-id="@manufacturer.Value" checked="@manufacturer.Selected" />
                        <label for="attribute-manufacturer-@manufacturer.Value">
                            @manufacturer.Text
                        </label>
                    </li>
                </div>
                currentIndex++;
            }
        </ul>
        @if (Model.Manufacturers.Count > visibleCount)
        {
            <div class="filter-expand-section">
                <button class="btn-expand-manufacturers" onclick="toggleManufacturers()">
                    <span class="expand-text">Show More Manufacturers</span>
                    <span class="collapse-text" style="display: none;">Show Less Manufacturers</span>
                    <i class="fa fa-chevron-down expand-icon"></i>
                    <i class="fa fa-chevron-up collapse-icon" style="display: none;"></i>
                </button>
                <div class="manufacturer-count">
                    <span class="visible-count">@visibleCount</span> of <span class="total-count">@Model.Manufacturers.Count</span> manufacturers
                </div>
            </div>
        }
    </div>
</div>

<script>
let manufacturerDisplayedCount = 6; // Initially showing 6 manufacturers
const manufacturerStepSize = 10; // Show 10 more each time

function toggleManufacturers() {
    const allItems = document.querySelectorAll('.manufacturer-wrapper');
    const totalCount = allItems.length;
    const expandText = document.querySelector('.btn-expand-manufacturers .expand-text');
    const collapseText = document.querySelector('.btn-expand-manufacturers .collapse-text');
    const expandIcon = document.querySelector('.btn-expand-manufacturers .expand-icon');
    const collapseIcon = document.querySelector('.btn-expand-manufacturers .collapse-icon');
    const visibleCountSpan = document.querySelector('.manufacturer-count .visible-count');

    // Check current state
    const isShowingAll = manufacturerDisplayedCount >= totalCount;

    if (isShowingAll) {
        // Collapse back to initial 6
        manufacturerDisplayedCount = 6;
        allItems.forEach((item, index) => {
            if (index < manufacturerDisplayedCount) {
                item.style.display = 'block';
                item.classList.remove('manufacturer-item-hidden');
                item.classList.add('manufacturer-item-visible');
            } else {
                item.style.display = 'none';
                item.classList.add('manufacturer-item-hidden');
                item.classList.remove('manufacturer-item-visible');
            }
        });

        // Show expand button
        expandText.style.display = 'inline';
        collapseText.style.display = 'none';
        expandIcon.style.display = 'inline';
        collapseIcon.style.display = 'none';
    } else {
        // Show more manufacturers (10 more)
        const newCount = Math.min(manufacturerDisplayedCount + manufacturerStepSize, totalCount);

        allItems.forEach((item, index) => {
            if (index < newCount) {
                item.style.display = 'block';
                item.classList.remove('manufacturer-item-hidden');
                item.classList.add('manufacturer-item-visible');
            }
        });

        manufacturerDisplayedCount = newCount;

        // Update button text based on whether all items are now visible
        if (manufacturerDisplayedCount >= totalCount) {
            expandText.textContent = 'Show More Manufacturers';
            expandText.style.display = 'none';
            collapseText.style.display = 'inline';
            expandIcon.style.display = 'none';
            collapseIcon.style.display = 'inline';
        } else {
            expandText.textContent = `Show ${Math.min(manufacturerStepSize, totalCount - manufacturerDisplayedCount)} More Manufacturers`;
        }
    }

    // Update visible count display
    if (visibleCountSpan) {
        visibleCountSpan.textContent = manufacturerDisplayedCount;
    }
}
</script>
<script asp-location="Footer">
    $(function () {
        var $msEls = $('[data-manufacturer-id]');
        $msEls.on('change', function () {
            CatalogProducts.getProducts();
        });

        $(CatalogProducts).on('before', function (e) {
            var selectedMs = $.map($msEls, function (el) {
                var $mEl = $(el);
                if ($mEl.is(':checked')) return $mEl.data('manufacturer-id')
                return null;
            });

            if (selectedMs && selectedMs.length > 0) {
                e.payload.urlBuilder
                    .addParameter('ms', selectedMs.join(','));
            }
        });
    });
</script>